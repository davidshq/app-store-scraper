/**
 * TypeScript type definitions for the validators utilities
 */

import { AppOptions, ReviewsOptions, ListOptions } from '../index.d';

/**
 * Validates that required fields are present in options
 * 
 * @param opts - Options to validate
 * @param requiredFields - Array of required field names
 * @param message - Error message if requirements not met
 * @throws {Error} If any required field is missing
 */
export function validateRequired<T extends Record<string, any>>(
  opts: T,
  requiredFields: string[],
  message?: string
): void;

/**
 * Validates that either of two fields is present in options
 * 
 * @param opts - Options to validate
 * @param field1 - First field name
 * @param field2 - Second field name
 * @param message - Error message if requirements not met
 * @throws {Error} If both fields are missing
 */
export function validateEither<T extends Record<string, any>>(
  opts: T,
  field1: string,
  field2: string,
  message?: string
): void;

/**
 * Validates a field against an array of valid values
 * 
 * @param opts - Options to validate
 * @param field - Field name to validate
 * @param validValues - Array of valid values
 * @param message - Error message if value is invalid
 * @throws {Error} If the field value is not valid
 */
export function validateEnum<T extends Record<string, any>, V>(
  opts: T,
  field: string,
  validValues: V[],
  message?: string
): void;

/**
 * Validates a field is within a numeric range
 * 
 * @param opts - Options to validate
 * @param field - Field name to validate
 * @param min - Minimum valid value (inclusive)
 * @param max - Maximum valid value (inclusive)
 * @param message - Error message if value is out of range
 * @throws {Error} If the field value is outside the range
 */
export function validateRange<T extends Record<string, any>>(
  opts: T,
  field: string,
  min: number,
  max: number,
  message?: string
): void;

/**
 * Validates options for app requests
 * 
 * @param opts - Options to validate
 * @throws {Error} If id/appId is missing
 */
export function validateApp(opts: Partial<AppOptions>): void;

/**
 * Validates options for list requests
 * 
 * @param opts - Options to validate
 * @throws {Error} If category, collection, or num options are invalid
 */
export function validateList(opts: Partial<ListOptions>): void;

/**
 * Validates options for reviews requests
 * 
 * @param opts - Options to validate
 * @throws {Error} If id/appId is missing or other options are invalid
 */
export function validateReviews(opts: Partial<ReviewsOptions>): void; 